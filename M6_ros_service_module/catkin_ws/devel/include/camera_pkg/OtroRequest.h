// Generated by gencpp from file camera_pkg/OtroRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_PKG_MESSAGE_OTROREQUEST_H
#define CAMERA_PKG_MESSAGE_OTROREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_pkg
{
template <class ContainerAllocator>
struct OtroRequest_
{
  typedef OtroRequest_<ContainerAllocator> Type;

  OtroRequest_()
    : a(0)  {
    }
  OtroRequest_(const ContainerAllocator& _alloc)
    : a(0)  {
  (void)_alloc;
    }



   typedef int64_t _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::camera_pkg::OtroRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_pkg::OtroRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OtroRequest_

typedef ::camera_pkg::OtroRequest_<std::allocator<void> > OtroRequest;

typedef boost::shared_ptr< ::camera_pkg::OtroRequest > OtroRequestPtr;
typedef boost::shared_ptr< ::camera_pkg::OtroRequest const> OtroRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_pkg::OtroRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_pkg::OtroRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_pkg::OtroRequest_<ContainerAllocator1> & lhs, const ::camera_pkg::OtroRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_pkg::OtroRequest_<ContainerAllocator1> & lhs, const ::camera_pkg::OtroRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera_pkg::OtroRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_pkg::OtroRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pkg::OtroRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pkg::OtroRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pkg::OtroRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pkg::OtroRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_pkg::OtroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "019706110004b728d56d8baaa8e32797";
  }

  static const char* value(const ::camera_pkg::OtroRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x019706110004b728ULL;
  static const uint64_t static_value2 = 0xd56d8baaa8e32797ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_pkg::OtroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_pkg/OtroRequest";
  }

  static const char* value(const ::camera_pkg::OtroRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_pkg::OtroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 a\n"
;
  }

  static const char* value(const ::camera_pkg::OtroRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_pkg::OtroRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OtroRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_pkg::OtroRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_pkg::OtroRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<int64_t>::stream(s, indent + "  ", v.a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_PKG_MESSAGE_OTROREQUEST_H
